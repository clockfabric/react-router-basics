{"version":3,"sources":["components/About.js","components/Nav.js","components/Shop.js","components/ItemDetails.js","components/App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","Nav","navStyle","color","textDecoration","className","react_router_dom","style","to","Shop","useEffect","fetchItems","_useState","useState","_useState2","Object","slicedToArray","items","setItems","_ref","asyncToGenerator","regenerator_default","mark","_callee","data","wrap","_context","prev","next","fetch","sent","json","stop","apply","this","arguments","map","item","key","itemid","concat","name","ItemDetails","match","images","setItem","_ref2","itemDetail","params","id","description","src","transparent","alt","Home","App","components_Nav","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06a52332.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst About = () => {\r\n\treturn <h1>Fortnite API access</h1>;\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n\tconst navStyle = {\r\n\t\tcolor: \"white\",\r\n\t\ttextDecoration: \"none\"\r\n\t};\r\n\r\n\treturn (\r\n\t\t<nav>\r\n\t\t\t<h3>Fortnite API</h3>\r\n\t\t\t<ul className='nav-links'>\r\n\t\t\t\t<Link style={navStyle} to='/about'>\r\n\t\t\t\t\t<li>About</li>\r\n\t\t\t\t</Link>\r\n\r\n\t\t\t\t<Link style={navStyle} to='/shop'>\r\n\t\t\t\t\t<li>Shop</li>\r\n\t\t\t\t</Link>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t);\r\n};\r\n\r\nexport default Nav;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Shop = () => {\r\n\tuseEffect(() => {\r\n\t\tfetchItems();\r\n\t}, []);\r\n\r\n\tconst [items, setItems] = useState([]);\r\n\r\n\tconst fetchItems = async () => {\r\n\t\tconst data = await fetch(\r\n\t\t\t\"https://fortnite-public-api.theapinetwork.com/prod09/upcoming/get\"\r\n\t\t);\r\n\r\n\t\tconst items = await data.json();\r\n\t\tsetItems(items.items);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{items.map(item => (\r\n\t\t\t\t<h1 key={item.itemid}>\r\n\t\t\t\t\t<Link to={`/shop/${item.itemid}`}>{item.name}</Link>\r\n\t\t\t\t</h1>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Shop;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst ItemDetails = ({ match }) => {\r\n\tuseEffect(() => {\r\n\t\tfetchItems();\r\n\t});\r\n\r\n\tconst [item, setItem] = useState({\r\n\t\timages: {}\r\n\t});\r\n\r\n\tconst fetchItems = async () => {\r\n\t\tconst data = await fetch(\r\n\t\t\t`https://fortnite-public-api.theapinetwork.com/prod09/item/get?ids=${\r\n\t\t\t\tmatch.params.id\r\n\t\t\t}`\r\n\t\t);\r\n\t\tconst itemDetail = await data.json();\r\n\t\tsetItem(itemDetail);\r\n\t};\r\n\r\n\t//fetchItems();\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>{item.name}</h1>\r\n\t\t\t<h3>{item.description}</h3>\r\n\t\t\t<img src={item.images.transparent} alt='' />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ItemDetails;\r\n","import React from \"react\";\nimport About from \"./About\";\nimport Nav from \"./Nav\";\nimport Shop from \"./Shop\";\nimport ItemDetails from \"./ItemDetails\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<div className='App'>\n\t\t\t\t<Nav />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path='/' exact component={Home} />\n\t\t\t\t\t<Route path='/about' component={About} />\n\t\t\t\t\t<Route path='/shop' exact component={Shop} />\n\t\t\t\t\t<Route path='/shop/:id' component={ItemDetails} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nconst Home = () => (\n\t<div>\n\t\t<h1>Home page</h1>\n\t</div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}